package solid;

public class Solid {
    /*
    S - single responsibility, не должна быть больше 1 причины изменять класс,
    или класс должен иметь только одно предназначение

    O - open-closed, программные сущности должны быть открыты для расширения, но закрыты для изменения
    класс должен быть таким, чтобы нужно было переопределять методы, чтобы расшириться и не менять что-то

    L - Liskov, Барбары, объект в программе можно заменить их наследниками без изменения свойств программы

    I - Interface segregation, клиенты не должны быть вынуждены реализовывать методы, которые не используют
    "толстые" интерфейсы нужно разделять на более мелкие специфические, чтобы клиент знал только нужные себе

    D - dependency inversion, зависимости внутри системы строятся на абстракции,
    то есть реализации зависели от интерфейсов
     */

    /*
    Паттерны проектирования - решение типичных задач, возникающих в объектно-ориентированном проектировании

    Мы пишем так что это точно будет работать!
    Мы пишем так что это прочитают другие и поймут!
    Мы объясняем так что это поймут все!
     */
}
